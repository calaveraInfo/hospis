<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>cz.cestadomu.hospis</groupId>
		<artifactId>rest</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>rest-lib</artifactId>
	<name>Hospis REST API library</name>
	<description>Module that serves in Hospis project as a thin layer for translation between public REST API and core module.</description>
	<url>https://github.com/calaveraInfo/hospis</url>

	<scm>
		<url>https://github.com/calaveraInfo/hospis/tree/master/rest/lib</url>
	</scm>

	<dependencies>
		<!--
			Contains Spring security dependencies.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!--
			Contains object to xml conversion libraries.
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
		</dependency>

		<!--
			Contains web related dependencies like @RestController, @RequestMapping etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--
			Contains integration related dependencies like @IntegrationComponentScan, @MessagingGateway etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-integration</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-java-dsl</artifactId>
		</dependency>

		<!--
			JMS related dependencies
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-jms</artifactId>
		</dependency>

		<!--
			ActiveMQ related dependencies
		-->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-spring</artifactId>
		</dependency>
		
		<!--
			http://docs.spring.io/spring-boot/docs/1.2.3.RELEASE/reference/htmlsingle/
			74.1 Create a deployable war file
			...
			The final step in the process is to ensure that the embedded servlet container doesnâ€™t
			interfere with the servlet container to which the war file will be deployed. To do so, you
			need to mark the embedded servlet container dependency as provided.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<!--
			Contains test related dependencies like @RunWith, @WebAppConfiguration etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- For the reason of this dependency see profile generate-model. -->
		<dependency>
			<groupId>cz.cestadomu.hospis</groupId>
			<artifactId>core-mock</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- For the reason of this dependency see profile generate-model. -->
		<dependency>
			<groupId>cz.cestadomu.hospis</groupId>
			<artifactId>core-model</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>generate-model</id>
			<!-- This profile generates Java model from core-model schema files
				in ${project.build.directory}/generated-sources/xjc.
				These classes can be used (copypasted) as a basis for this module's
				own model.
				
				In other words, this project does not have a layer with generated
				model and instead it maps it's own model to the contract of the
				core module and this profile is helping in doing it. Note that
				the absence of generated model has to be compensated by checking
				compatibility of such mapping with the original contract in test!
			-->
			<dependencies>
				<dependency>
					<groupId>cz.cestadomu.hospis</groupId>
					<artifactId>core-model</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-core-model</id>
								<phase>initialize</phase>
								<goals>
									<goal>unpack-dependencies</goal>
								</goals>
								<configuration>
									<includeArtifactIds>core-model</includeArtifactIds>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jvnet.jaxb2.maven2</groupId>
						<artifactId>maven-jaxb2-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-core-model</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<schemaDirectory>${project.build.directory}/dependency/schema</schemaDirectory>
							<schemaIncludes>
								<include>**/*.xsd</include>
							</schemaIncludes>
							<bindingDirectory>src/main/resources/bindings</bindingDirectory>
							<bindingIncludes>
								<bindingInclude>global-bindings.xjb</bindingInclude>
							</bindingIncludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
