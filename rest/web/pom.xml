<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>rest-web</artifactId>
	<packaging>war</packaging>

	<name>Hospis rest API web</name>

	<parent>
		<groupId>cz.cestadomu.hospis</groupId>
		<artifactId>rest</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
		</dependency>

		<!--
			Contains web related dependencies like @RestController, @RequestMapping etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--
			Contains integration related dependencies like @IntegrationComponentScan, @MessagingGateway etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-integration</artifactId>
		</dependency>

		<!--
			JMS related dependencies
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.integration</groupId>
			<artifactId>spring-integration-jms</artifactId>
		</dependency>

		<!--
			ActiveMQ related dependencies
		-->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-spring</artifactId>
			<version>5.10.1</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!--
			Contains test related dependencies like @RunWith, @WebAppConfiguration etc.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--
			http://docs.spring.io/spring-boot/docs/1.2.3.RELEASE/reference/htmlsingle/
			74.1 Create a deployable war file
			...
			The final step in the process is to ensure that the embedded servlet container doesnâ€™t
			interfere with the servlet container to which the war file will be deployed. To do so, you
			need to mark the embedded servlet container dependency as provided.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>monolitic</id>
			<properties>
				<spring.profiles.active>monolitic</spring.profiles.active>
			</properties>
			<dependencies>
				<dependency>
					<groupId>cz.cestadomu.hospis</groupId>
					<artifactId>mq-lib</artifactId>
				</dependency>
				<dependency>
					<groupId>cz.cestadomu.hospis</groupId>
					<artifactId>core-lib</artifactId>
				</dependency>
				<dependency>
					<groupId>cz.cestadomu.hospis</groupId>
					<artifactId>core-model</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-core-model</id>
								<phase>initialize</phase>
								<goals>
									<goal>unpack-dependencies</goal>
								</goals>
								<configuration>
									<includeArtifactIds>core-model</includeArtifactIds>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jvnet.jaxb2.maven2</groupId>
						<artifactId>maven-jaxb2-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-core-model</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<schemaDirectory>${project.build.directory}/dependency/schema</schemaDirectory>
							<schemaIncludes>
								<include>**/*.xsd</include>
							</schemaIncludes>
							<bindingDirectory>src/main/resources/bindings</bindingDirectory>
							<bindingIncludes>
								<bindingInclude>global-bindings.xjb</bindingInclude>
							</bindingIncludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>microservice</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>microservice</spring.profiles.active>
			</properties>
		</profile>
	</profiles>

	<build>
		<plugins>
			<!--
				<plugin>
				Spring boot plugin is propably needed for maven to spring profile translation
				via resource filtering in application.properties (@spring.profiles.active@) at least
				it's the case in Eclipse IDE
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			-->
		</plugins>
	</build>

</project>
